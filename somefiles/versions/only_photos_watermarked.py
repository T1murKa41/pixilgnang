import config
import logging
import json
import os
import uuid
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import IDFilter, ChatTypeFilter, IsReplyFilter, Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler
from PIL import Image, ImageDraw, ImageFont
import io

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
conn = sqlite3.connect('pghub.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY, 
    is_admin INTEGER DEFAULT 0, 
    is_banned INTEGER DEFAULT 0, 
    sender_name TEXT DEFAULT NULL
)
''')
cursor.execute(
    'CREATE TABLE IF NOT EXISTS storage (channel TEXT, last_send_time TEXT)'
)
cursor.execute('''
CREATE TABLE IF NOT EXISTS memes (
    meme_cache_id TEXT PRIMARY KEY,
    message_id INTEGER,
    from_user_id INTEGER,
    from_user_full_name TEXT,
    forwarded_message_id INTEGER
)
''')
conn.commit()


class Form(StatesGroup):
    post = State()
    meme = State()
    album = State()
    description = State()


class UserCheckMiddleware(BaseMiddleware):
    def __init__(self, db_cursor):
        super(UserCheckMiddleware, self).__init__()
        self.cursor = db_cursor

    async def on_process_message(self, message: types.Message, data: dict):
        user_id = message.from_user.id
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name if message.from_user.last_name else ""
        sender_name = f"{first_name} {last_name}".strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.cursor.execute('SELECT is_banned FROM users WHERE id = ?', (user_id,))
        user = self.cursor.fetchone()

        if user and user[0] == 1:
            await message.reply('üõë *–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!*', parse_mode='markdown')
            raise CancelHandler()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user:
            self.cursor.execute('UPDATE users SET sender_name = ? WHERE id = ?', (sender_name, user_id))
        
        conn.commit()

dp.middleware.setup(UserCheckMiddleware(cursor))


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º" –∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
    reply_markup = ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º'),
        KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    )

    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ —Å –∫–∞–Ω–∞–ª–∞–º–∏
    channel_buttons = InlineKeyboardMarkup()
    pixelgang_button = InlineKeyboardButton('üì± pixelgang', url='https://t.me/pixelgang')
    pocobytes_button = InlineKeyboardButton('üìû pocobytes', url='https://t.me/pocobytes')
    channel_buttons.add(pixelgang_button, pocobytes_button)

    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name if message.from_user.last_name else ""
    sender_name = f"{first_name} {last_name}".strip()

    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('INSERT INTO users (id, is_admin, is_banned, sender_name) VALUES (?, 0, 0, ?)',
                       (user_id, sender_name))
        conn.commit()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.reply('üëã *–ü—Ä–∏–≤–µ—Ç*, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ @pixelgang & @pocobytes!',
                            reply_markup=reply_markup, parse_mode='markdown')
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫–∞–Ω–∞–ª–∞–º–∏
        await message.answer('üì¢ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–∏–º –∫–∞–Ω–∞–ª–∞–º:', reply_markup=channel_buttons)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer('üëã *–ü—Ä–∏–≤–µ—Ç*, —ç—Ç–æ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ @pixelgang & @pocobytes',
                             parse_mode='markdown', reply_markup=channel_buttons)


@dp.message_handler(IDFilter(chat_id=config.admin_chat), commands=['ban'])
async def ban_command(message: types.Message):
    admin_id = message.from_user.id

    cursor.execute('SELECT * FROM users WHERE id = ?', (admin_id,))
    admin = cursor.fetchone()
    if not admin or admin[1] != 1:
        await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    bann_user_id = None

    if message.reply_to_message:
        if message.reply_to_message.forward_from:
            bann_user_id = message.reply_to_message.forward_from.id
        elif message.reply_to_message.from_user and not message.reply_to_message.from_user.is_bot:
            bann_user_id = message.reply_to_message.from_user.id
        elif message.reply_to_message.forward_sender_name:
            sender_name = message.reply_to_message.forward_sender_name
            cursor.execute('SELECT id FROM users WHERE sender_name = ?', (sender_name,))
            user_data = cursor.fetchone()
            if user_data:
                bann_user_id = user_data[0]
            else:
                await message.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                return
        else:
            await message.reply('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–∞–Ω–æ–º –ø–æ ID.')
            return
    elif message.get_args():
        try:
            bann_user_id = int(message.get_args())
        except ValueError:
            await message.reply('‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
            return
    else:
        await message.reply('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –µ–≥–æ ID –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.')
        return

    if bann_user_id == config.bot_id:
        await message.reply('‚ö†Ô∏è –Ø –Ω–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å —Å–∞–º —Å–µ–±—è.')
        return

    if bann_user_id == admin_id:
        await message.reply("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è.")
        return

    cursor.execute('SELECT * FROM users WHERE id = ?', (bann_user_id,))
    user = cursor.fetchone()
    if not user:
        await message.reply(f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{bann_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', parse_mode='markdown')
        return
    if user[2] == 1:
        await message.reply(f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{bann_user_id}` —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.', parse_mode='markdown')
        return

    cursor.execute('UPDATE users SET is_banned = 1 WHERE id = ?', (bann_user_id,))
    conn.commit()

    await message.reply(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{bann_user_id}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", parse_mode='markdown')
    await bot.send_message(config.logs_channel, f"#BAN\n\nID: {bann_user_id}")


@dp.message_handler(IDFilter(chat_id=config.admin_chat), commands=['unban'])
async def unban_command(message: types.Message):
    admin_id = message.from_user.id

    cursor.execute('SELECT * FROM users WHERE id = ?', (admin_id,))
    admin = cursor.fetchone()
    if not admin or admin[1] != 1:
        await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    unban_user_id = None

    if message.reply_to_message:
        if message.reply_to_message.forward_from:
            unban_user_id = message.reply_to_message.forward_from.id
        elif message.reply_to_message.from_user and not message.reply_to_message.from_user.is_bot:
            unban_user_id = message.reply_to_message.from_user.id
        elif message.reply_to_message.forward_sender_name:
            sender_name = message.reply_to_message.forward_sender_name
            cursor.execute('SELECT id FROM users WHERE sender_name = ?', (sender_name,))
            user_data = cursor.fetchone()
            if user_data:
                unban_user_id = user_data[0]
            else:
                await message.reply('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                return
        else:
            await message.reply('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
            return
    elif message.get_args():
        try:
            unban_user_id = int(message.get_args())
        except ValueError:
            await message.reply('‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
            return
    else:
        await message.reply('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –µ–≥–æ ID –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.')
        return

    if unban_user_id == config.bot_id:
        await message.reply('‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º–æ –∫ –±–æ—Ç–∞–º.')
        return

    cursor.execute('SELECT * FROM users WHERE id = ?', (unban_user_id,))
    user = cursor.fetchone()
    if not user:
        await message.reply(f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{unban_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', parse_mode='markdown')
        return
    if user[2] == 0:
        await message.reply(f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{unban_user_id}` —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.', parse_mode='markdown')
        return

    cursor.execute('UPDATE users SET is_banned = 0 WHERE id = ?', (unban_user_id,))
    conn.commit()

    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{unban_user_id}` —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", parse_mode='markdown')
    await bot.send_message(config.logs_channel, f"#UNBAN\n\nID: {unban_user_id}")


@dp.message_handler(ChatTypeFilter('private'), Text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'))
@dp.message_handler(commands=['send'], state='*')
async def start_send(message: types.Message):
    await Form.post.set()
    await message.reply('‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∞–¥–º–∏–Ω–∞–º.', reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
        types.KeyboardButton('–û—Ç–º–µ–Ω–∞')))


@dp.message_handler(Text('–û—Ç–º–µ–Ω–∞'), state=Form.post)
async def cancel_send(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('‚ôøÔ∏è –û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º'),
        KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    ))


@dp.message_handler(state=Form.post, content_types=types.ContentType.ANY)
async def send_to_admin(message: types.Message, state: FSMContext):
    if message.text not in {'/start', '/help', '/send'}:
        await bot.forward_message(chat_id=config.admin_chat, from_chat_id=message.chat.id, message_id=message.message_id)
        await message.answer('‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º.',
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º'),
        KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    ))
        await state.finish()
    else:
        await message.answer('‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')



@dp.message_handler(ChatTypeFilter('private'), Text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º'))
@dp.message_handler(ChatTypeFilter('private'), commands=['sendmeme'])
async def sendmeme(message: types.Message):
    await message.answer('‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –º–µ–¥–∏–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.',
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
        types.KeyboardButton('–î–∞–ª–µ–µ'),
        types.KeyboardButton('–û—Ç–º–µ–Ω–∞')))
    await Form.album.set()


@dp.message_handler(Text('–û—Ç–º–µ–Ω–∞'), state=Form.album)
async def cancel_album(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('‚ôøÔ∏è –û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º'),
        KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    ))


@dp.message_handler(Text('–î–∞–ª–µ–µ'), state=Form.album)
async def enter_description(message: types.Message, state: FSMContext):
    await Form.description.set()
    await message.answer('‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø–æ—Å—Ç—É.',
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
        types.KeyboardButton('–û—Ç–º–µ–Ω–∞')))


@dp.message_handler(Text('–û—Ç–º–µ–Ω–∞'), state=Form.description)
async def cancel_description(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('‚ôøÔ∏è –û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º'),
        KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    ))


@dp.message_handler(state=Form.description)
async def complete_album(message: types.Message, state: FSMContext):
    data = await state.get_data()
    album = data.get('album', [])
    description = message.text

    if not album:
        await message.answer('‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
        return

    media_group = []
    for index, item in enumerate(album):
        caption = description if index == 0 else ''
        if item['type'] == 'photo':
            media_group.append(types.InputMediaPhoto(media=item['media'], caption=caption))
        elif item['type'] == 'video':
            media_group.append(types.InputMediaVideo(media=item['media'], caption=caption))
        elif item['type'] == 'document':
            media_group.append(types.InputMediaDocument(media=item['media'], caption=caption))

    try:
        forward = await bot.send_media_group(chat_id=config.admin_chat, media=media_group)
        meme_id = forward[0].message_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã.")
        return

    await bot.forward_message(chat_id=config.admin_chat, from_chat_id=message.chat.id, message_id=message.message_id)
    await message.answer('‚úÖ –ú–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.',
                         reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º'),
        KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
    ))

    meme_cache_id = str(uuid.uuid4())
    acceptpg_id = "accept-pg-" + meme_cache_id
    acceptpoco_id = "accept-poco-" + meme_cache_id
    decline_id = "decline-" + meme_cache_id

    meme_data = {
        'album': album,
        'description': description,
        'user_id': message.from_user.id,
        'full_name': message.from_user.full_name
    }

    with open(f'callbackData-{meme_cache_id}.json', 'w') as f:
        json.dump(meme_data, f)

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ pixelgang', callback_data=acceptpg_id))
    keyboard.add(InlineKeyboardButton(text='üì≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ pocobytes', callback_data=acceptpoco_id))
    keyboard.add(InlineKeyboardButton(text='üÜò –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=decline_id))

    await bot.send_message(chat_id=config.admin_chat,
                           text=f'{message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–º. –ó–∞–ø–æ—Å—Ç–∏—Ç—å –≤ –∫–∞–Ω–∞–ª?',
                           reply_markup=keyboard)

    await bot.send_message(config.logs_channel,
                           f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a> –æ—Ç–ø—Ä–∞–≤–∏–ª <a href="t.me/c/{config.admin_chat}/{meme_id}">–º–µ–º</a>.')
    logging.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name}({message.from_user.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–º(t.me/c/{config.admin_chat}/{meme_id}).')

    await state.finish()


@dp.message_handler(state=Form.album, content_types=types.ContentType.ANY)
async def add_to_album(message: types.Message, state: FSMContext):
    data = await state.get_data()
    album = data.get('album', [])

    if message.photo:
        album.append({
            'type': 'photo',
            'media': message.photo[-1].file_id,
            'caption': message.caption
        })
    elif message.video:
        album.append({
            'type': 'video',
            'media': message.video.file_id,
            'caption': message.caption
        })
    elif message.document:
        album.append({
            'type': 'document',
            'media': message.document.file_id,
            'caption': message.caption
        })
    else:
        await message.answer('‚ö†Ô∏è –¢–æ–ª—å–∫–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–ª—å–±–æ–º.')
        return

    await state.update_data(album=album)
    await message.answer('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∞–ª—å–±–æ–º—É.')

def apply_watermark(image_bytes, watermark_path='water.png'):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–∞—Ç–µ—Ä–º–∞—Ä–∫—É
    image = Image.open(io.BytesIO(image_bytes)).convert("RGBA")
    watermark = Image.open(watermark_path).convert("RGBA")

    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–∞—Ç–µ—Ä–º–∞—Ä–∫–∏
    watermark_width = image.width // 6
    watermark_height = int((watermark_width / watermark.width) * watermark.height)
    watermark = watermark.resize((watermark_width, watermark_height))

    # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤–∞—Ç–µ—Ä–º–∞—Ä–∫—É –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞
    position = (image.width - watermark_width - 10, image.height - watermark_height - 10)

    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –≤–∞—Ç–µ—Ä–º–∞—Ä–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    transparent = Image.new("RGBA", image.size, (0, 0, 0, 0))
    transparent.paste(image, (0, 0))
    transparent.paste(watermark, position, mask=watermark)
    return transparent.convert("RGB")

@dp.callback_query_handler(lambda c: c.data.startswith("accept-"))
async def accept_meme(call: types.CallbackQuery):
    _, channel_id, meme_id = call.data.split("-", 2)
    filename = f'callbackData-{meme_id}.json'

    chat_id = config.channel if channel_id == "pg" else config.channel2 if channel_id == "poco" else None
    channel_name = 'üì± pixelgang' if channel_id == "pg" else 'üìû pocobytes' if channel_id == "poco" else None

    cursor.execute('SELECT * FROM storage WHERE channel = ?', (channel_id,))
    user = cursor.fetchone()
    last_used = user[1] if user else 0

    if chat_id is None:
        await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞.", show_alert=True)
        return

    if last_used is not None and (datetime.now() - datetime.fromisoformat(last_used)).total_seconds() < 1200:
        time_left = 1200 - (datetime.now() - datetime.fromisoformat(last_used)).total_seconds()
        await bot.answer_callback_query(call.id, f'‚è≥ –í –∫–∞–Ω–∞–ª–µ {channel_name} —É–∂–µ –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ –∞–ø–ø—Ä—É–≤ –ø–æ—Å—Ç–∞. –ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {int(time_left)} —Å–µ–∫—É–Ω–¥, –ø–æ –±—Ä–∞—Ç—Å–∫–∏.')
        return

    with open(filename, 'r') as f:
        meme_data = json.load(f)

    description = f"{meme_data['description']}\nBy [{meme_data['full_name']}](tg://user?id={meme_data['user_id']})"

    media_group = []

    for index, item in enumerate(meme_data['album']):
        caption = description if index == 0 else ''

        if item['type'] == 'photo':
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Telegram –∏ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –≤–∞—Ç–µ—Ä–º–∞—Ä–∫—É
            photo_bytes = await bot.download_file_by_id(item['media'])
            watermarked_image = apply_watermark(photo_bytes.read())
            output = io.BytesIO()
            watermarked_image.save(output, format='JPEG')
            output.seek(0)
            media_group.append(types.InputMediaPhoto(media=output, caption=caption, parse_mode='markdown'))

        elif item['type'] == 'video':
            # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–ª–æ–∂–Ω–µ–µ
            media_group.append(types.InputMediaVideo(media=item['media'], caption=caption, parse_mode='markdown'))

        elif item['type'] == 'document':
            media_group.append(types.InputMediaDocument(media=item['media'], caption=caption, parse_mode='markdown'))

    try:
        await bot.send_media_group(chat_id=chat_id, media=media_group)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã", show_alert=True)
        return

    await bot.send_message(chat_id=meme_data['user_id'], text=f'‚úÖ –í–∞—à –º–µ–º –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {channel_name}.')

    await bot.answer_callback_query(call.id, '–ú–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ú–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.')
    cursor.execute('UPDATE storage SET last_send_time = ? WHERE channel = ?', (datetime.now(), channel_id))
    os.remove(filename)


@dp.callback_query_handler(lambda c: c.data.startswith("decline-"))
async def decline_meme(call: types.CallbackQuery):
    meme_id = call.data.split("-")[1]
    filename = f'callbackData-{meme_id}.json'

    with open(filename, 'r') as f:
        meme_data = json.load(f)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –º–µ–º–∞
    await bot.send_message(chat_id=meme_data['user_id'], text='‚ùå –í–∞—à –º–µ–º –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–æ–º.')

    await bot.answer_callback_query(call.id, '–ú–µ–º –æ—Ç–∫–ª–æ–Ω—ë–Ω.')
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ú–µ–º –æ—Ç–∫–ª–æ–Ω—ë–Ω.')

    os.remove(filename)

@dp.callback_query_handler(lambda c: c.data.startswith("delete"))
async def delete_meme(call: types.CallbackQuery):
    _, message_id, channel_id = call.data.split('-')
    message_id = int(message_id)

    chat_id = config.channel if channel_id == "pg" else config.channel2 if channel_id == "poco" else None

    if chat_id is None:
        await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞.", show_alert=True)
        return

    await bot.delete_message(chat_id=chat_id, message_id=message_id)
    await bot.answer_callback_query(call.id, '–ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω.')
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω.')
    await bot.send_message(chat_id=call.data.split()[2], text=f'–í–∞—à –ø–æ—Å—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–æ–º.')

    user_id = call.data.split()[2]

    await bot.send_message(config.logs_channel, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id={call.from_user.id}">{call.from_user.full_name}</a>({call.from_user.id}) —É–¥–∞–ª–∏–ª <a href="t.me/c/{config.admin_chat}/{call.message.message_id}">–ø–æ—Å—Ç</a> –æ—Ç <a href="tg://user?id={user_id}">—á–µ–ª–∞</a>({user_id}).')
    logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name}({call.from_user.id}) —É–¥–∞–ª–∏–ª –ø–æ—Å—Ç(t.me/c/{config.admin_chat}/{call.message.message_id}) –æ—Ç {user_id}.')


# @dp.message_handler(ChatTypeFilter("private"), ForwardedMessageFilter(False))
# async def main_private(message: types.Message):
#      await bot.forward_message(chat_id=config.admin_chat, from_chat_id=message.chat.id, message_id=message.message_id)


@dp.message_handler(IDFilter(chat_id=config.admin_chat), commands=['admin'])
async def admin_command(message: types.Message):
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ '/admin' –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")

    # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É
    admin_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∏–º–µ–µ—Ç –ª–∏ —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    cursor.execute('SELECT * FROM users WHERE id = ?', (admin_id,))
    admin = cursor.fetchone()
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin}")

    if not admin or admin[1] != 1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è is_admin
        await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    target_user_id = None

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user_id = message.reply_to_message.from_user.id
        logging.info(f"–ü–æ–ª—É—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞: {target_user_id}")
    # –ï—Å–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã
    elif message.get_args():
        try:
            target_user_id = int(message.get_args().strip())
            logging.info(f"–ü–æ–ª—É—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã: {target_user_id}")
        except ValueError:
            await message.reply('‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
            logging.warning(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {message.get_args()}")
            return
    else:
        await message.reply('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –µ–≥–æ ID –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.')
        logging.warning("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT * FROM users WHERE id = ?', (target_user_id,))
    user = cursor.fetchone()
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {user}")

    if not user:
        await message.reply(f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', parse_mode='markdown')
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–∞–º —Å–µ–±—è
    if target_user_id == admin_id:
        await message.reply("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
        logging.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user[1] == 1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è is_admin
        await message.reply(f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{target_user_id}` —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', parse_mode='markdown')
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('UPDATE users SET is_admin = 1 WHERE id = ?', (target_user_id,))
    conn.commit()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id} –ø—Ä–∏—Å–≤–æ–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{target_user_id}` –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", parse_mode='markdown')
    await bot.send_message(config.logs_channel, f"#GRANT_ADMIN\n\nID: {target_user_id}")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª.")

@dp.message_handler(IDFilter(chat_id=config.admin_chat), IsReplyFilter(True))
async def main_admin(message: types.Message):
    if message.reply_to_message["from"]["id"] == config.bot_id:
        is_anon = True if message.reply_to_message.forward_sender_name else False

        if is_anon:
            sender_name = message.reply_to_message.forward_sender_name
            cursor.execute('SELECT id FROM users WHERE sender_name = ?', (sender_name,))
            user_data = cursor.fetchone()
            if user_data:
                user_id = user_data[0]
                cursor.execute('SELECT * FROM users WHERE id = ?', (message.from_user.id,))
                admin_data = cursor.fetchone()
                if admin_data and admin_data[1] == 1:
                    await bot.copy_message(chat_id=user_id, from_chat_id=message.chat.id, message_id=message.message_id)
                    await message.reply(f'üòé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–Ω–æ–Ω–∏–º–Ω—ã–º, –Ω–æ –µ–≥–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ.\n\nID: {user_id}')
                else:
                    await bot.forward_message(chat_id=user_id, from_chat_id=message.chat.id, message_id=message.message_id)
                    await message.reply(f'üòé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–Ω–æ–Ω–∏–º–Ω—ã–º, –Ω–æ –µ–≥–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\nID: {user_id}')
            else:
                await message.reply('ü•≤ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∏–º–µ–Ω–µ–º.')
        else:
            user_id = message.reply_to_message.forward_from.id
            cursor.execute('SELECT * FROM users WHERE id = ?', (message.from_user.id,))
            admin_data = cursor.fetchone()

            if admin_data and admin_data[1] == 1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è is_admin
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞
                await bot.send_message(chat_id=user_id, text=message.text)
                await message.reply('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.')
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞
                await bot.send_message(chat_id=user_id, text=f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.full_name} ({message.from_user.id}) –Ω–∞–ø–∏—Å–∞–ª:\n\n{message.text}')
                await message.reply('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')


# @dp.errors_handler()
# async def errors_handler(_, error):
#     logging.error(error)
#     try:
#         await bot.send_message(chat_id=config.error_channel,
#                                text=f"–õ–æ–≥ –æ–± –æ—à–∏–±–∫–µ:\n\n<code>{error}</code>")
#         return True
#     except Exception as e:
#         print(e)
#         print(error)
#         return False


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
